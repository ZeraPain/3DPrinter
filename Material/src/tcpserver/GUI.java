/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tcpserver;

/**
 *
 * @author debian
 */
import packet.*;

public class GUI extends javax.swing.JFrame {

    private static Server material;
    private static GUI gui;
    private static int amountC;
    private static int amountM;
    private static int amountY;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                if (material != null) {
                    material.shutdown();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fillingCyan = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fillingMagenta = new javax.swing.JProgressBar();
        fillingYellow = new javax.swing.JProgressBar();
        Button_refill_cyan = new javax.swing.JButton();
        Button_refill_magenta = new javax.swing.JButton();
        Button_refill_yellow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Material");

        jLabel1.setText("Cyan");

        fillingCyan.setStringPainted(true);

        jLabel2.setText("Magenta");

        jLabel3.setText("Yellow");

        fillingMagenta.setStringPainted(true);

        fillingYellow.setStringPainted(true);

        Button_refill_cyan.setText("Refill");
        Button_refill_cyan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_refill_cyanActionPerformed(evt);
            }
        });

        Button_refill_magenta.setText("Refill");
        Button_refill_magenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_refill_magentaActionPerformed(evt);
            }
        });

        Button_refill_yellow.setText("Refill");
        Button_refill_yellow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_refill_yellowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(8, 8, 8)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fillingYellow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Button_refill_yellow))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fillingMagenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Button_refill_magenta))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fillingCyan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Button_refill_cyan)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fillingCyan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Button_refill_cyan))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fillingMagenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Button_refill_magenta))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fillingYellow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Button_refill_yellow))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Button_refill_cyanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_refill_cyanActionPerformed
        // TODO add your handling code here:
        amountC = gui.fillingCyan.getMaximum();
        gui.fillingCyan.setValue(amountC);
    }//GEN-LAST:event_Button_refill_cyanActionPerformed

    private void Button_refill_magentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_refill_magentaActionPerformed
        // TODO add your handling code here:
        amountM = gui.fillingMagenta.getMaximum();
        gui.fillingMagenta.setValue(amountM);
    }//GEN-LAST:event_Button_refill_magentaActionPerformed

    private void Button_refill_yellowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_refill_yellowActionPerformed
        // TODO add your handling code here:
        amountY = gui.fillingYellow.getMaximum();
        gui.fillingYellow.setValue(amountY);
    }//GEN-LAST:event_Button_refill_yellowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.out.println("### Material Server ###");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                gui = new GUI();

                material = new Server();
                material.start(16001);

                amountC = 10000;
                amountM = 10000;
                amountY = 10000;

                gui.fillingCyan.setMaximum(amountC);
                gui.fillingCyan.setValue(amountC);
                gui.fillingMagenta.setMaximum(amountM);
                gui.fillingMagenta.setValue(amountM);
                gui.fillingYellow.setMaximum(amountY);
                gui.fillingYellow.setValue(amountY);
                gui.setVisible(true);
            }
        });
    }

    public static void Interpret(final PacketReader p) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                //p.printData();

                switch (p.getOpcode()) {
                    case Opcode.auth:
                        System.out.println("Das Modul mit ID [" + p.getID() + "] hat sich authentifiziert");
                        break;
                    case Opcode.disconnect:
                        System.out.println("Ein Modul hat sich abgemeldet");
                        break;
                    case Opcode.errorTest:
                        System.out.println("Es wurde ein Fehler zu Testzwecken angefragt");
                        PacketWriter packetError = new PacketWriter();
                        packetError.errorPrinter(12345);
                        material.sendData(packetError.getPacket());
                        break;
                    case Opcode.requestColor:
                        int[] usedColor = p.getColor();
                        boolean success = true;

                        if (amountC - usedColor[0] < 100) {
                            success = false;
                            material.sendData(new PacketWriter(Opcode.errorColorC).getPacket());
                        } else {
                            amountC -= usedColor[0];
                            gui.fillingCyan.setValue(amountC);
                        }

                        if (amountM - usedColor[1] < 100) {
                            success = false;
                            material.sendData(new PacketWriter(Opcode.errorColorM).getPacket());
                        } else {
                            amountM -= usedColor[1];
                            gui.fillingMagenta.setValue(amountM);
                        }

                        if (amountY - usedColor[2] < 100) {
                            success = false;
                            material.sendData(new PacketWriter(Opcode.errorColorY).getPacket());
                        } else {
                            amountY -= usedColor[2];
                            gui.fillingYellow.setValue(amountY);
                        }

                        PacketWriter colorPacket = new PacketWriter();
                        colorPacket.responseColor(success);
                        material.sendData(colorPacket.getPacket());
                        //System.out.println("Cyan: " + amountC + " Mangenta: " + amountM + " Yellow: " + amountY);
                        break;
                    case Opcode.requestfillingColorLevel:
                        PacketWriter packetColor = new PacketWriter();
                        packetColor.fillingColorLevel(amountC, amountM, amountY);
                        material.sendData(packetColor.getPacket());
                        break;
                }
            }
        }).start();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_refill_cyan;
    private javax.swing.JButton Button_refill_magenta;
    private javax.swing.JButton Button_refill_yellow;
    private javax.swing.JProgressBar fillingCyan;
    private javax.swing.JProgressBar fillingMagenta;
    private javax.swing.JProgressBar fillingYellow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
