/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tcpclient;

/**
 *
 * @author debian
 */
import java.net.*;
import java.util.*;
import mqtt.MQTTClient;
import org.json.*;
import packet.*;
import rest.RESTServer;

public class GUI extends javax.swing.JFrame {

    private static Client drucker;
    private static Client material;
    private static GUI gui;

    private static Queue<PacketWriter> queue;
    private static int[] colorStatus;

    private static int packetCount;
    private static long startTime;
    private static int packetsToSend;

    private static final String dashboardURL = "http://192.168.178.42:8080/dashboard";
    private static final int company = 1;
    private static RESTServer rest;
    
    private static String mqttclientId = null;
    private static final String MQTTbroker = "tcp://192.168.178.34:1883";
    private static MQTTClient mqtt;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                unregisterPrinter();
                
                if (drucker != null) {
                    drucker.sendData(new PacketWriter(Opcode.disconnect).getPacket());
                    drucker.disconnect();
                }

                if (material != null) {
                    material.sendData(new PacketWriter(Opcode.disconnect).getPacket());
                    material.disconnect();
                }
                
                if (mqtt != null) {
                    mqtt.exit();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea_status = new javax.swing.JTextArea();
        Button_fillingLevel = new javax.swing.JButton();
        Button_point = new javax.swing.JButton();
        Button_line = new javax.swing.JButton();
        Button_stresstest = new javax.swing.JButton();
        Label_receivedpackets = new javax.swing.JLabel();
        Button_errortest = new javax.swing.JButton();
        TextField_packetsToSend = new javax.swing.JTextField();
        ComboBox_connectiontype = new javax.swing.JComboBox();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ControlPanel");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);

        TextArea_status.setColumns(20);
        TextArea_status.setRows(5);
        jScrollPane1.setViewportView(TextArea_status);

        Button_fillingLevel.setText("Filling Level");
        Button_fillingLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_fillingLevelActionPerformed(evt);
            }
        });

        Button_point.setText("Draw Point");
        Button_point.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_pointActionPerformed(evt);
            }
        });

        Button_line.setText("Draw Line");
        Button_line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_lineActionPerformed(evt);
            }
        });

        Button_stresstest.setText("Stress Test");
        Button_stresstest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_stresstestActionPerformed(evt);
            }
        });

        Label_receivedpackets.setText("Received: 0");

        Button_errortest.setText("Error Test");
        Button_errortest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_errortestActionPerformed(evt);
            }
        });

        TextField_packetsToSend.setText("100000");

        ComboBox_connectiontype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TCP", "UDP" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Button_stresstest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TextField_packetsToSend, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboBox_connectiontype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(Label_receivedpackets, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Button_fillingLevel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Button_point)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Button_line)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Button_errortest)
                        .addGap(12, 12, 12)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_fillingLevel)
                    .addComponent(Button_line)
                    .addComponent(Button_point)
                    .addComponent(Button_errortest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_stresstest)
                    .addComponent(Label_receivedpackets)
                    .addComponent(TextField_packetsToSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBox_connectiontype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Button_fillingLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_fillingLevelActionPerformed
        // TODO add your handling code here:
        if (material != null) {
            material.sendData(new PacketWriter(Opcode.requestfillingColorLevel).getPacket());
        }
    }//GEN-LAST:event_Button_fillingLevelActionPerformed

    private void Button_stresstestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_stresstestActionPerformed
        // TODO add your handling code here:
        packetCount = 0;
        packetsToSend = Integer.parseInt(gui.TextField_packetsToSend.getText());

        new Thread(new Runnable() {
            @Override
            public void run() {
                if (drucker == null) {
                    return;
                }

                if (gui.ComboBox_connectiontype.getSelectedIndex() == 0) { // TCP
                    packetCount = 0;
                    packetsToSend = Integer.parseInt(gui.TextField_packetsToSend.getText());

                    for (int i = 0; i < packetsToSend; i++) {
                        drucker.sendData(new PacketWriter(Opcode.stresstestRequest).getPacket());
                    }
                } else if (gui.ComboBox_connectiontype.getSelectedIndex() == 1) { // UDP
                    try {
                        DatagramSocket clientSocket = new DatagramSocket();

                        byte[] sendData = new PacketWriter(Opcode.stresstestRequest).getPacket();
                        DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, InetAddress.getByName("localhost"), 16010);

                        for (int i = 0; i < packetsToSend; i++) {

                            clientSocket.send(sendPacket);
                        }

                    } catch (Exception ex) {
                        System.out.println("stressTest: " + ex.getMessage());
                    }
                }

                startTime = System.currentTimeMillis();
            }
        }).start();
    }//GEN-LAST:event_Button_stresstestActionPerformed

    private void Button_pointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_pointActionPerformed
        // TODO add your handling code here:
        if (drucker == null) {
            return;
        }

        drawPoint(37, 44, 255, 0, 0, (short) 11);

    }//GEN-LAST:event_Button_pointActionPerformed

    private void Button_lineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_lineActionPerformed
        // TODO add your handling code here:
        if (drucker == null) {
            return;
        }

        drawLine(5, 8, 33, 98, 255, 0, 0, (short) 11);

    }//GEN-LAST:event_Button_lineActionPerformed

    private void Button_errortestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_errortestActionPerformed
        // TODO add your handling code here:
        if (drucker == null) {
            return;
        }

        drucker.sendData(new PacketWriter(Opcode.errorTest).getPacket());
    }//GEN-LAST:event_Button_errortestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.out.println("### Control Panel ###");

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                gui = new GUI();
                queue = new LinkedList<>();

                rest = new RESTServer(gui);
                rest.start("localhost", 8080);
                
                mqtt = new MQTTClient(gui);
                mqtt.start(MQTTbroker, "Printer");

                PacketWriter packet = new PacketWriter();

                drucker = new Client();
                if (drucker.connect("localhost", 16000)) {
                    packet.authenticate(3001);
                    drucker.sendData(packet.getPacket());
                    print("Successfully connected to printer");
                } else {
                    print("Error: Unable to connect to printer");
                }

                material = new Client();
                if (material.connect("localhost", 16001)) {
                    packet.authenticate(3002);
                    material.sendData(packet.getPacket());
                    print("Successfully connected to material");
                } else {
                    print("Error: Unable to connect to material");
                }
                
                if (registerPrinter()) {
                    print("Successfully connected to Dashboard");
                } else {
                    print("Error: Unable to connect to Dashboard");
                }


                gui.setVisible(true);
            }
        });
    }

    private static String getVMInetAddress() {
        try {
            NetworkInterface networkInterface = NetworkInterface.getByName("eth0");
            Enumeration<InetAddress> inetAddresses = networkInterface.getInetAddresses();
            if (inetAddresses.hasMoreElements()) {
                inetAddresses.nextElement();
            }
            if (inetAddresses.hasMoreElements()) {
                return inetAddresses.nextElement().getHostAddress();
            }
        } catch (SocketException ex) {
            System.out.println("getInetAddress() Error: " + ex.getMessage());
        }
        return null;
    }

    private static boolean registerPrinter() {
        try {
            JSONObject jsonObj = new JSONObject();
            jsonObj.put("opcode", Opcode.auth);
            //jsonObj.put("address", "http://" + Inet4Address.getLocalHost().getHostAddress() + ":8080/printer");
            jsonObj.put("address", getVMInetAddress());
            jsonObj.put("port", 8080);
            jsonObj.put("path", "/printer");
            jsonObj.put("company", company);

            return rest.send(dashboardURL, jsonObj);
        } catch (JSONException ex) {
            System.out.println("registerPrinter() Error: " + ex.getMessage());
            return false;
        }
    }
    
    private static void unregisterPrinter() {
        try {
            JSONObject jsonObj = new JSONObject();
            jsonObj.put("opcode", Opcode.disconnect);
            jsonObj.put("address", getVMInetAddress());

            rest.send(dashboardURL, jsonObj);
        } catch (JSONException ex) {
            System.out.println("unregisterPrinter() Error: " + ex.getMessage());
        }
    }

    public static int[] getColorStatus() {
        colorStatus = null;

        try {
            material.sendData(new PacketWriter(Opcode.requestfillingColorLevel).getPacket());
            for (int i = 0; i < 1000; i++) {
                if (colorStatus != null) {
                    break;
                }
                Thread.sleep(1);
            }
        } catch (Exception ex) {
            System.out.println("getColorStatus() Failed: " + ex.getMessage());
        }
        return colorStatus;
    }

    public static int getQueueLength() {
        return queue.size();
    }

    public static void mqttrequest(String clientId, JSONObject jsonObj) {
        mqttclientId = clientId;
        
        try {
            switch (jsonObj.getInt("opcode")) {
                case Opcode.point:
                    gui.drawPoint(jsonObj.getInt("xStart"),
                            jsonObj.getInt("yStart"),
                            jsonObj.getInt("cyan"),
                            jsonObj.getInt("magenta"),
                            jsonObj.getInt("yellow"),
                            (short) jsonObj.getInt("size"));
                    break;
                case Opcode.line:
                    gui.drawLine(jsonObj.getInt("xStart"),
                            jsonObj.getInt("yStart"),
                            jsonObj.getInt("xEnd"),
                            jsonObj.getInt("yEnd"),
                            jsonObj.getInt("cyan"),
                            jsonObj.getInt("magenta"),
                            jsonObj.getInt("yellow"),
                            (short) jsonObj.getInt("size"));
                    break;
                default:
                    System.out.println("Unknown Opcode!");
            }
            
        } catch (JSONException ex) {
            System.out.println("mqttrequest Error jSON: " + ex.getMessage());
        }
    }
    
    private static void mqttfinish() {
        if (mqttclientId == null)
            return;
        
        try {
            JSONObject jsonObj = new JSONObject();
            jsonObj.put("opcode", Opcode.mqttfinish);
            jsonObj.put("clientId", mqttclientId);
            jsonObj.put("message", "Print finished!");
            
            mqtt.send(mqttclientId, jsonObj);
            mqtt.send("PrintRequest", jsonObj);
            mqttclientId = null;
        } catch (JSONException ex) {
            System.out.println("mqttfinish() Error: " + ex.getMessage());
        }
    }
    
    public static void drawPoint(int X, int Y, int cyan, int magenta, int yellow, short size) {
        PacketWriter packetPrinter = new PacketWriter();
        packetPrinter.drawPoint(X, Y, (byte) cyan, (byte) magenta, (byte) yellow, size);
        if (queue.isEmpty()) {
            queue.add(packetPrinter);
            drucker.sendData(packetPrinter.getPacket());
            print("drawPoint request sent to the server");
        } else {
            queue.add(packetPrinter);
            print("drawPoint was added to the queue");
        }
    }

    public static void drawLine(int X1, int Y1, int X2, int Y2, int cyan, int magenta, int yellow, short size) {
        PacketWriter packetPrinter = new PacketWriter();
        packetPrinter.drawLine(X1, Y1, X2, Y2, (byte) cyan, (byte) magenta, (byte) yellow);
        if (queue.isEmpty()) {
            queue.add(packetPrinter);
            drucker.sendData(packetPrinter.getPacket());
            print("drawLine request sent to the server");
        } else {
            queue.add(packetPrinter);
            print("drawLine was added to the queue");
        }
    }

    public static void Interpret(final PacketReader p) {
        switch (p.getOpcode()) {
            case Opcode.errorPrinter:
                print("Printer responses: Error(" + p.getErrorCode() + ")");
                break;
            case Opcode.printFinished:
                print("Printer responses: Finished");
                queue.remove();
                if (!queue.isEmpty()) {
                    drucker.sendData(queue.element().getPacket());
                } else {
                    print("Queue is now empty");
                    mqttfinish();
                }
                break;
            case Opcode.errorBusy:
                print("The printer is busy!");
                break;
            case Opcode.errorColorC:
                print("Missing Color: Cyan");
                break;
            case Opcode.errorColorM:
                print("Missing Color: Magenta");
                break;
            case Opcode.errorColorY:
                print("Missing Color: Yellow");
                break;
            case Opcode.requireColor:
                int[] requiredColor = p.getColor();
                PacketWriter packetColor = new PacketWriter();
                packetColor.requestColor(requiredColor[0], requiredColor[1], requiredColor[2]);
                material.sendData(packetColor.getPacket());
                break;
            case Opcode.responseColor:
                PacketWriter packetSuccess = new PacketWriter();
                packetSuccess.responseColor(p.getSuccess());
                drucker.sendData(packetSuccess.getPacket());
                break;
            case Opcode.responsefillingColorLevel:
                colorStatus = p.getColor();
                print("Current Filling Levels: \n"
                        + "Cyan: " + colorStatus[0] + "\n"
                        + "Magenta: " + colorStatus[1] + "\n"
                        + "Yellow: " + colorStatus[2]);
                break;
            case Opcode.stresstestResponse:
                gui.Label_receivedpackets.setText("Received: " + ++packetCount);
                if (packetCount >= packetsToSend * 0.99) {
                    long elapsedTime = System.currentTimeMillis() - startTime;
                    print("Stress Test finished! Latency: " + elapsedTime + "ms");
                }
                break;
        }
    }

    private static void print(String status) {
        gui.TextArea_status.append(status + "\n");
        gui.TextArea_status.setCaretPosition(gui.TextArea_status.getDocument().getLength());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_errortest;
    private javax.swing.JButton Button_fillingLevel;
    private javax.swing.JButton Button_line;
    private javax.swing.JButton Button_point;
    private javax.swing.JButton Button_stresstest;
    private javax.swing.JComboBox ComboBox_connectiontype;
    private javax.swing.JLabel Label_receivedpackets;
    private javax.swing.JTextArea TextArea_status;
    private javax.swing.JTextField TextField_packetsToSend;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
