/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package restclient;

/**
 *
 * @author debian
 */
import java.util.*;
import javax.swing.table.DefaultTableModel;
import mqtt.MQTTClient;
import packet.*;
import org.json.*;
import rest.RESTServer;

public class GUI extends javax.swing.JFrame {

    private static final String MQTTbroker = "tcp://192.168.178.34:1883";
    private static MQTTClient mqtt;
    
    static class Printer {

        private final int company;
        private final String address;
        private final int port;
        private final String path;

        public Printer(String address, int port, String path, int company) {
            this.address = address;
            this.port = port;
            this.path = path;
            this.company = company;
        }

        public int getCompany() {
            return company;
        }

        public String getAddress() {
            return address;
        }

        public String getURL() {
            return "http://" + address + ":" + port + path;
        }
    }

    private static GUI gui;
    private static List<Printer> printerList;
    private static RESTServer rest;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        jTablePrinter.getColumnModel().getColumn(0).setPreferredWidth(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea_status = new javax.swing.JTextArea();
        Button_point = new javax.swing.JButton();
        Button_line = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePrinter = new javax.swing.JTable();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dashboard");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);

        TextArea_status.setColumns(20);
        TextArea_status.setRows(5);
        jScrollPane1.setViewportView(TextArea_status);

        Button_point.setText("Draw Point");
        Button_point.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_pointActionPerformed(evt);
            }
        });

        Button_line.setText("Draw Line");
        Button_line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_lineActionPerformed(evt);
            }
        });

        jTablePrinter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CID", "Printer"
            }
        ));
        jScrollPane2.setViewportView(jTablePrinter);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Button_point, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Button_line, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Button_line)
                            .addComponent(Button_point))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Button_pointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_pointActionPerformed
        // TODO add your handling code here:
        drawPoint(37, 44, 255, 0, 0, (short) 11);
    }//GEN-LAST:event_Button_pointActionPerformed

    private void Button_lineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_lineActionPerformed
        // TODO add your handling code here:
        drawLine(5, 8, 33, 98, 255, 0, 0, (short) 11);
    }//GEN-LAST:event_Button_lineActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.out.println("### Dashboard ###");

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                gui = new GUI();

                printerList = new ArrayList<>();

                rest = new RESTServer(gui);
                rest.start("localhost", 8080);
                
                mqtt = new MQTTClient(gui);
                mqtt.start(MQTTbroker, "Dashboard");
                mqtt.subscribe("PrintRequest");

                gui.setVisible(true);
            }
        });
    }

    public static void addPrinter(String address, int port, String path, int company) {
        printerList.add(new Printer(address, port, path, company));
        Object[] row = {company, address};
        DefaultTableModel model = (DefaultTableModel) gui.jTablePrinter.getModel();
        model.addRow(row);
        print("Printer connected: " + address);
    }

    public static void removePrinter(String address) {
        for (Printer printer : printerList) {
            if (printer.getAddress().equals(address)) {
                DefaultTableModel model = (DefaultTableModel) gui.jTablePrinter.getModel();

                for (int row = 0; row <= gui.jTablePrinter.getRowCount() - 1; row++) {
                    if (gui.jTablePrinter.getValueAt(row, 1).equals(address)) {
                        model.removeRow(row);
                    }
                }
                printerList.remove(printer);
                print("Printer disconnected: " + address);
                break;
            }
        }
    }

    private static int getQueueSize(String printerURL) {
        JSONObject jsonObj = rest.get(printerURL, "status");

        if (jsonObj != null) {
            try {
                return jsonObj.getInt("queue");
            } catch (JSONException ex) {
                System.out.println("getQueueSize() Error: " + ex.getMessage());
            }
        }

        return -1;
    }

    private static Printer getPrintServer(int company) {
        List<Printer> printerCompany = new ArrayList<>();

        for (Printer printer : printerList) {
            if (printer.getCompany() == company) {
                printerCompany.add(printer);
            }
        }

        if (printerCompany.isEmpty()) {
            return null;
        }

        int bestQueue = -1;
        Printer bestPrinter = null;

        for (Printer printer : printerCompany) {
            int queue = getQueueSize(printer.getURL());
            if (queue != -1 && (bestQueue == -1 || queue < bestQueue)) {
                bestPrinter = printer;
            }
            bestQueue = queue;
        }

        print("getPrintServer(): " + bestPrinter.getAddress() + " (Queue: " + bestQueue + ")");
        return bestPrinter;
    }

    public static void mqttrequest(JSONObject jsonObj) {
        Printer printServer = getPrintServer(1);
        if (printServer != null) {
            rest.send(printServer.getURL(), jsonObj);
        } else {
            print("No printer available");
        }
    }

    public static void drawPoint(int xStart, int yStart, int cyan, int magenta, int yellow, short size) {
        try {
            JSONObject jsonObj = new JSONObject();
            jsonObj.put("opcode", Opcode.point);
            jsonObj.put("xStart", xStart);
            jsonObj.put("yStart", yStart);
            jsonObj.put("cyan", cyan);
            jsonObj.put("magenta", magenta);
            jsonObj.put("yellow", yellow);
            jsonObj.put("size", size);

            Printer printServer = getPrintServer(1);
            if (printServer != null) {
                rest.send(printServer.getURL(), jsonObj);
            } else {
                print("No printer available");
            }
        } catch (Exception ex) {
            System.out.println("drawPoint() Error: " + ex.getMessage());
        }
    }

    public static void drawLine(int xStart, int yStart, int xEnd, int yEnd, int cyan, int magenta, int yellow, short size) {
        try {
            JSONObject jsonObj = new JSONObject();
            jsonObj.put("opcode", Opcode.line);
            jsonObj.put("xStart", xStart);
            jsonObj.put("yStart", yStart);
            jsonObj.put("xEnd", xEnd);
            jsonObj.put("yEnd", yEnd);
            jsonObj.put("cyan", cyan);
            jsonObj.put("magenta", magenta);
            jsonObj.put("yellow", yellow);
            jsonObj.put("size", size);

            Printer printServer = getPrintServer(1);
            if (printServer != null) {
                rest.send(printServer.getURL(), jsonObj);
            } else {
                print("No printer available");
            }
        } catch (Exception ex) {
            System.out.println("drawPoint() Error: " + ex.getMessage());
        }
    }

    private static void print(String status) {
        gui.TextArea_status.append(status + "\n");
        gui.TextArea_status.setCaretPosition(gui.TextArea_status.getDocument().getLength());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_line;
    private javax.swing.JButton Button_point;
    private javax.swing.JTextArea TextArea_status;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTablePrinter;
    // End of variables declaration//GEN-END:variables
}
